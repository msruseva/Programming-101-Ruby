----------- 15.12.2015 -----------

- watch - изпълнява командата след watch на всеки 2 сек
- полиморфизъм - преизползване на код
- protected - може да бъде извикан с явен получател, ако се намира в класа и, ако явният получател е обект от тип класа или клас, който е наследник 
- private - не може да се вика с явен получател
- програматично викане на метод:
  - p.send :name_of_the_method
  - p.public_send - вика само public методите

--- super ---

- self - инстанция на класа
- super - вика метода със същото име в класа,който е бил наследен
  - инстанция на това което сме наследили (Superclass)
  - използва се за преизползване на функционалност
  - super() - ArgumentError
  - super - работи

--- respond_to ---

- true - ако имаме такъв public метод (дали нещо се съдържа в public интефейс на дадено нещо)

--- Duck typing ---

- не се интересуваме от типа, а от това дали има методите, които очакваме да има

--- SOLID ---

- 5 principles of OOP
1. single responsibility principle - 1 клас - прави 1 нещо
2. open/closed principle - по-добре кодът да е extensiable отколкото да го модифицираме
3. Liskov substitution principle
4. interface segregation principle - принцип за разделяне на интефейси
5. dependency inversion principle - по-добре е да се разчита на абстракция, отколкото на конкретни имплементации

--- Exception ---

- retry - изпълнява begin блокът още няколко пъти
- rescue секциите се изпълняват отгоре надолу




















