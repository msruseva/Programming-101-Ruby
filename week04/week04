------------- ООП --------------

--- Енкапсулация ---

- механизмът на даден език, който определя какво може да ограничи да се вижда от един клас
- private метод - крие от публичния интерфейс, не може да бъде извикан с явен получател; може да се наследява
- protectеd - могат да бъдат извикани с явен получател само вътре в  класа; не може да се наследява

--- Class ---

- класовете могат да дефинират методи
- instance_variables - @this_is_instance_variable
  - не могат да бъдат достъпване извън класа
  - връща nil, ако искаме да достъпим instance_variable, което не съществува
- Class наследява от Object
- всичко в Ruby е обект
- не могат да се наследят повече от 1 обект

--- Proc ---

- блокове
  - симулират ф-ии (ф-ии от по-висок ред)
  - обект от тип proc - p = Proc.new {|x| puts x}
                        p.call 1 - едва сега се изпълнява обектът от тип Proc
- def take_block2(&block) - ф-ята взима блок и го използва като обект, който можем да пуснем по-надолу, но можем и да не подадем
 def take_block(block) - block - отделен аргумент на ф-ята, може да се вика ф-ята с подаден аргумент, който не е задължително да е от тип proc
   block.call
 end

 p = Proc.new { puts "Creat proc." }
 p = proc { puts "Shortcut proc." }


- взима колкото си иска аргуметни
- като блокове се държат

--- Lambda ---

- създава proc, т.е. класът на lambda е Proc
- има нужда от нужния брой аргументи
- като методи се държат

--- Send ---

- позволява ни да викаме методи
- p.send :say_hello - send извиква методът say_hello, подаден като символ
  ОR
  method_name = :say_hello
  p.send method_name

